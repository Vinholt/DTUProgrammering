
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000006a0  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000218c  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fcf  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e02  00000000  00000000  00003a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00004868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000830  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001151  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  000065f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c1       	rjmp	.+1004   	; 0x422 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
  42:	00 00       	nop
  44:	ee c1       	rjmp	.+988    	; 0x422 <__bad_interrupt>
  46:	00 00       	nop
  48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c1       	rjmp	.+972    	; 0x422 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c1       	rjmp	.+956    	; 0x422 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
  72:	00 00       	nop
  74:	d6 c1       	rjmp	.+940    	; 0x422 <__bad_interrupt>
  76:	00 00       	nop
  78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
  82:	00 00       	nop
  84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c8 c1       	rjmp	.+912    	; 0x422 <__bad_interrupt>
  92:	00 00       	nop
  94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c1       	rjmp	.+888    	; 0x422 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
  ec:	00 00       	nop
  ee:	5f 00       	.word	0x005f	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	07 00       	.word	0x0007	; ????
  f8:	07 00       	.word	0x0007	; ????
  fa:	00 00       	nop
  fc:	00 14       	cp	r0, r0
  fe:	7f 14       	cp	r7, r15
 100:	7f 14       	cp	r7, r15
 102:	00 00       	nop
 104:	00 24       	eor	r0, r0
 106:	2a 7f       	andi	r18, 0xFA	; 250
 108:	2a 12       	cpse	r2, r26
 10a:	00 00       	nop
 10c:	00 23       	and	r16, r16
 10e:	13 08       	sbc	r1, r3
 110:	64 62       	ori	r22, 0x24	; 36
 112:	00 00       	nop
 114:	00 36       	cpi	r16, 0x60	; 96
 116:	49 55       	subi	r20, 0x59	; 89
 118:	22 50       	subi	r18, 0x02	; 2
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	05 03       	mulsu	r16, r21
 120:	00 00       	nop
 122:	00 00       	nop
 124:	00 1c       	adc	r0, r0
 126:	22 41       	sbci	r18, 0x12	; 18
 128:	00 00       	nop
 12a:	00 00       	nop
 12c:	00 41       	sbci	r16, 0x10	; 16
 12e:	22 1c       	adc	r2, r2
 130:	00 00       	nop
 132:	00 00       	nop
 134:	00 08       	sbc	r0, r0
 136:	2a 1c       	adc	r2, r10
 138:	2a 08       	sbc	r2, r10
 13a:	00 00       	nop
 13c:	00 08       	sbc	r0, r0
 13e:	08 3e       	cpi	r16, 0xE8	; 232
 140:	08 08       	sbc	r0, r8
 142:	00 00       	nop
 144:	00 a0       	ldd	r0, Z+32	; 0x20
 146:	60 00       	.word	0x0060	; ????
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	08 08       	sbc	r0, r8
 150:	08 08       	sbc	r0, r8
 152:	00 00       	nop
 154:	00 60       	ori	r16, 0x00	; 0
 156:	60 00       	.word	0x0060	; ????
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 20       	and	r0, r0
 15e:	10 08       	sbc	r1, r0
 160:	04 02       	muls	r16, r20
 162:	00 00       	nop
 164:	00 3e       	cpi	r16, 0xE0	; 224
 166:	51 49       	sbci	r21, 0x91	; 145
 168:	45 3e       	cpi	r20, 0xE5	; 229
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	42 7f       	andi	r20, 0xF2	; 242
 170:	40 00       	.word	0x0040	; ????
 172:	00 00       	nop
 174:	00 62       	ori	r16, 0x20	; 32
 176:	51 49       	sbci	r21, 0x91	; 145
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	00 00       	nop
 17c:	00 22       	and	r0, r16
 17e:	41 49       	sbci	r20, 0x91	; 145
 180:	49 36       	cpi	r20, 0x69	; 105
 182:	00 00       	nop
 184:	00 18       	sub	r0, r0
 186:	14 12       	cpse	r1, r20
 188:	7f 10       	cpse	r7, r15
 18a:	00 00       	nop
 18c:	00 27       	eor	r16, r16
 18e:	45 45       	sbci	r20, 0x55	; 85
 190:	45 39       	cpi	r20, 0x95	; 149
 192:	00 00       	nop
 194:	00 3c       	cpi	r16, 0xC0	; 192
 196:	4a 49       	sbci	r20, 0x9A	; 154
 198:	49 30       	cpi	r20, 0x09	; 9
 19a:	00 00       	nop
 19c:	00 01       	movw	r0, r0
 19e:	71 09       	sbc	r23, r1
 1a0:	05 03       	mulsu	r16, r21
 1a2:	00 00       	nop
 1a4:	00 36       	cpi	r16, 0x60	; 96
 1a6:	49 49       	sbci	r20, 0x99	; 153
 1a8:	49 36       	cpi	r20, 0x69	; 105
 1aa:	00 00       	nop
 1ac:	00 06       	cpc	r0, r16
 1ae:	49 49       	sbci	r20, 0x99	; 153
 1b0:	29 1e       	adc	r2, r25
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	36 36       	cpi	r19, 0x66	; 102
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	00 00       	nop
 1be:	ac 6c       	ori	r26, 0xCC	; 204
 1c0:	00 00       	nop
 1c2:	00 00       	nop
 1c4:	00 08       	sbc	r0, r0
 1c6:	14 22       	and	r1, r20
 1c8:	41 00       	.word	0x0041	; ????
 1ca:	00 00       	nop
 1cc:	00 14       	cp	r0, r0
 1ce:	14 14       	cp	r1, r4
 1d0:	14 14       	cp	r1, r4
 1d2:	00 00       	nop
 1d4:	00 41       	sbci	r16, 0x10	; 16
 1d6:	22 14       	cp	r2, r2
 1d8:	08 00       	.word	0x0008	; ????
 1da:	00 00       	nop
 1dc:	00 02       	muls	r16, r16
 1de:	01 51       	subi	r16, 0x11	; 17
 1e0:	09 06       	cpc	r0, r25
 1e2:	00 00       	nop
 1e4:	00 32       	cpi	r16, 0x20	; 32
 1e6:	49 79       	andi	r20, 0x99	; 153
 1e8:	41 3e       	cpi	r20, 0xE1	; 225
 1ea:	00 00       	nop
 1ec:	00 7e       	andi	r16, 0xE0	; 224
 1ee:	09 09       	sbc	r16, r9
 1f0:	09 7e       	andi	r16, 0xE9	; 233
 1f2:	00 00       	nop
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	49 49       	sbci	r20, 0x99	; 153
 1f8:	49 36       	cpi	r20, 0x69	; 105
 1fa:	00 00       	nop
 1fc:	00 3e       	cpi	r16, 0xE0	; 224
 1fe:	41 41       	sbci	r20, 0x11	; 17
 200:	41 22       	and	r4, r17
 202:	00 00       	nop
 204:	00 7f       	andi	r16, 0xF0	; 240
 206:	41 41       	sbci	r20, 0x11	; 17
 208:	22 1c       	adc	r2, r2
 20a:	00 00       	nop
 20c:	00 7f       	andi	r16, 0xF0	; 240
 20e:	49 49       	sbci	r20, 0x99	; 153
 210:	49 41       	sbci	r20, 0x19	; 25
 212:	00 00       	nop
 214:	00 7f       	andi	r16, 0xF0	; 240
 216:	09 09       	sbc	r16, r9
 218:	09 01       	movw	r0, r18
 21a:	00 00       	nop
 21c:	00 3e       	cpi	r16, 0xE0	; 224
 21e:	41 41       	sbci	r20, 0x11	; 17
 220:	51 72       	andi	r21, 0x21	; 33
 222:	00 00       	nop
 224:	00 7f       	andi	r16, 0xF0	; 240
 226:	08 08       	sbc	r0, r8
 228:	08 7f       	andi	r16, 0xF8	; 248
 22a:	00 00       	nop
 22c:	00 41       	sbci	r16, 0x10	; 16
 22e:	7f 41       	sbci	r23, 0x1F	; 31
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 20       	and	r0, r0
 236:	40 41       	sbci	r20, 0x10	; 16
 238:	3f 01       	movw	r6, r30
 23a:	00 00       	nop
 23c:	00 7f       	andi	r16, 0xF0	; 240
 23e:	08 14       	cp	r0, r8
 240:	22 41       	sbci	r18, 0x12	; 18
 242:	00 00       	nop
 244:	00 7f       	andi	r16, 0xF0	; 240
 246:	40 40       	sbci	r20, 0x00	; 0
 248:	40 40       	sbci	r20, 0x00	; 0
 24a:	00 00       	nop
 24c:	00 7f       	andi	r16, 0xF0	; 240
 24e:	02 0c       	add	r0, r2
 250:	02 7f       	andi	r16, 0xF2	; 242
 252:	00 00       	nop
 254:	00 7f       	andi	r16, 0xF0	; 240
 256:	04 08       	sbc	r0, r4
 258:	10 7f       	andi	r17, 0xF0	; 240
 25a:	00 00       	nop
 25c:	00 3e       	cpi	r16, 0xE0	; 224
 25e:	41 41       	sbci	r20, 0x11	; 17
 260:	41 3e       	cpi	r20, 0xE1	; 225
 262:	00 00       	nop
 264:	00 7f       	andi	r16, 0xF0	; 240
 266:	09 09       	sbc	r16, r9
 268:	09 06       	cpc	r0, r25
 26a:	00 00       	nop
 26c:	00 3e       	cpi	r16, 0xE0	; 224
 26e:	41 51       	subi	r20, 0x11	; 17
 270:	21 5e       	subi	r18, 0xE1	; 225
 272:	00 00       	nop
 274:	00 7f       	andi	r16, 0xF0	; 240
 276:	09 19       	sub	r16, r9
 278:	29 46       	sbci	r18, 0x69	; 105
 27a:	00 00       	nop
 27c:	00 26       	eor	r0, r16
 27e:	49 49       	sbci	r20, 0x99	; 153
 280:	49 32       	cpi	r20, 0x29	; 41
 282:	00 00       	nop
 284:	00 01       	movw	r0, r0
 286:	01 7f       	andi	r16, 0xF1	; 241
 288:	01 01       	movw	r0, r2
 28a:	00 00       	nop
 28c:	00 3f       	cpi	r16, 0xF0	; 240
 28e:	40 40       	sbci	r20, 0x00	; 0
 290:	40 3f       	cpi	r20, 0xF0	; 240
 292:	00 00       	nop
 294:	00 1f       	adc	r16, r16
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	20 1f       	adc	r18, r16
 29a:	00 00       	nop
 29c:	00 3f       	cpi	r16, 0xF0	; 240
 29e:	40 38       	cpi	r20, 0x80	; 128
 2a0:	40 3f       	cpi	r20, 0xF0	; 240
 2a2:	00 00       	nop
 2a4:	00 63       	ori	r16, 0x30	; 48
 2a6:	14 08       	sbc	r1, r4
 2a8:	14 63       	ori	r17, 0x34	; 52
 2aa:	00 00       	nop
 2ac:	00 03       	mulsu	r16, r16
 2ae:	04 78       	andi	r16, 0x84	; 132
 2b0:	04 03       	mulsu	r16, r20
 2b2:	00 00       	nop
 2b4:	00 61       	ori	r16, 0x10	; 16
 2b6:	51 49       	sbci	r21, 0x91	; 145
 2b8:	45 43       	sbci	r20, 0x35	; 53
 2ba:	00 00       	nop
 2bc:	00 7f       	andi	r16, 0xF0	; 240
 2be:	41 41       	sbci	r20, 0x11	; 17
 2c0:	00 00       	nop
 2c2:	00 00       	nop
 2c4:	00 02       	muls	r16, r16
 2c6:	04 08       	sbc	r0, r4
 2c8:	10 20       	and	r1, r0
 2ca:	00 00       	nop
 2cc:	00 41       	sbci	r16, 0x10	; 16
 2ce:	41 7f       	andi	r20, 0xF1	; 241
 2d0:	00 00       	nop
 2d2:	00 00       	nop
 2d4:	00 04       	cpc	r0, r0
 2d6:	02 01       	movw	r0, r4
 2d8:	02 04       	cpc	r0, r2
 2da:	00 00       	nop
 2dc:	00 80       	ld	r0, Z
 2de:	80 80       	ld	r8, Z
 2e0:	80 80       	ld	r8, Z
 2e2:	00 00       	nop
 2e4:	00 01       	movw	r0, r0
 2e6:	02 04       	cpc	r0, r2
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 20       	and	r0, r0
 2ee:	54 54       	subi	r21, 0x44	; 68
 2f0:	54 78       	andi	r21, 0x84	; 132
 2f2:	00 00       	nop
 2f4:	00 7f       	andi	r16, 0xF0	; 240
 2f6:	48 44       	sbci	r20, 0x48	; 72
 2f8:	44 38       	cpi	r20, 0x84	; 132
 2fa:	00 00       	nop
 2fc:	00 38       	cpi	r16, 0x80	; 128
 2fe:	44 44       	sbci	r20, 0x44	; 68
 300:	28 00       	.word	0x0028	; ????
 302:	00 00       	nop
 304:	00 38       	cpi	r16, 0x80	; 128
 306:	44 44       	sbci	r20, 0x44	; 68
 308:	48 7f       	andi	r20, 0xF8	; 248
 30a:	00 00       	nop
 30c:	00 38       	cpi	r16, 0x80	; 128
 30e:	54 54       	subi	r21, 0x44	; 68
 310:	54 18       	sub	r5, r4
 312:	00 00       	nop
 314:	00 08       	sbc	r0, r0
 316:	7e 09       	sbc	r23, r14
 318:	02 00       	.word	0x0002	; ????
 31a:	00 00       	nop
 31c:	00 18       	sub	r0, r0
 31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
 320:	a4 7c       	andi	r26, 0xC4	; 196
 322:	00 00       	nop
 324:	00 7f       	andi	r16, 0xF0	; 240
 326:	08 04       	cpc	r0, r8
 328:	04 78       	andi	r16, 0x84	; 132
 32a:	00 00       	nop
 32c:	00 00       	nop
 32e:	7d 00       	.word	0x007d	; ????
 330:	00 00       	nop
 332:	00 00       	nop
 334:	00 80       	ld	r0, Z
 336:	84 7d       	andi	r24, 0xD4	; 212
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 7f       	andi	r16, 0xF0	; 240
 33e:	10 28       	or	r1, r0
 340:	44 00       	.word	0x0044	; ????
 342:	00 00       	nop
 344:	00 41       	sbci	r16, 0x10	; 16
 346:	7f 40       	sbci	r23, 0x0F	; 15
 348:	00 00       	nop
 34a:	00 00       	nop
 34c:	00 7c       	andi	r16, 0xC0	; 192
 34e:	04 18       	sub	r0, r4
 350:	04 78       	andi	r16, 0x84	; 132
 352:	00 00       	nop
 354:	00 7c       	andi	r16, 0xC0	; 192
 356:	08 04       	cpc	r0, r8
 358:	7c 00       	.word	0x007c	; ????
 35a:	00 00       	nop
 35c:	00 38       	cpi	r16, 0x80	; 128
 35e:	44 44       	sbci	r20, 0x44	; 68
 360:	38 00       	.word	0x0038	; ????
 362:	00 00       	nop
 364:	00 fc       	sbrc	r0, 0
 366:	24 24       	eor	r2, r4
 368:	18 00       	.word	0x0018	; ????
 36a:	00 00       	nop
 36c:	00 18       	sub	r0, r0
 36e:	24 24       	eor	r2, r4
 370:	fc 00       	.word	0x00fc	; ????
 372:	00 00       	nop
 374:	00 00       	nop
 376:	7c 08       	sbc	r7, r12
 378:	04 00       	.word	0x0004	; ????
 37a:	00 00       	nop
 37c:	00 48       	sbci	r16, 0x80	; 128
 37e:	54 54       	subi	r21, 0x44	; 68
 380:	24 00       	.word	0x0024	; ????
 382:	00 00       	nop
 384:	00 04       	cpc	r0, r0
 386:	7f 44       	sbci	r23, 0x4F	; 79
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	00 3c       	cpi	r16, 0xC0	; 192
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	7c 00       	.word	0x007c	; ????
 392:	00 00       	nop
 394:	00 1c       	adc	r0, r0
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	20 1c       	adc	r2, r0
 39a:	00 00       	nop
 39c:	00 3c       	cpi	r16, 0xC0	; 192
 39e:	40 30       	cpi	r20, 0x00	; 0
 3a0:	40 3c       	cpi	r20, 0xC0	; 192
 3a2:	00 00       	nop
 3a4:	00 44       	sbci	r16, 0x40	; 64
 3a6:	28 10       	cpse	r2, r8
 3a8:	28 44       	sbci	r18, 0x48	; 72
 3aa:	00 00       	nop
 3ac:	00 1c       	adc	r0, r0
 3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
 3b0:	7c 00       	.word	0x007c	; ????
 3b2:	00 00       	nop
 3b4:	00 44       	sbci	r16, 0x40	; 64
 3b6:	64 54       	subi	r22, 0x44	; 68
 3b8:	4c 44       	sbci	r20, 0x4C	; 76
 3ba:	00 00       	nop
 3bc:	00 08       	sbc	r0, r0
 3be:	36 41       	sbci	r19, 0x16	; 22
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	7f 00       	.word	0x007f	; ????
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	00 41       	sbci	r16, 0x10	; 16
 3ce:	36 08       	sbc	r3, r6
 3d0:	00 00       	nop
 3d2:	00 00       	nop
 3d4:	00 02       	muls	r16, r16
 3d6:	01 01       	movw	r0, r2
 3d8:	02 01       	movw	r0, r4
 3da:	00 00       	nop
 3dc:	00 02       	muls	r16, r16
 3de:	05 05       	cpc	r16, r5
 3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
 3e4:	11 24       	eor	r1, r1
 3e6:	1f be       	out	0x3f, r1	; 63
 3e8:	cf ef       	ldi	r28, 0xFF	; 255
 3ea:	d1 e2       	ldi	r29, 0x21	; 33
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	00 e0       	ldi	r16, 0x00	; 0
 3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
 3f4:	12 e0       	ldi	r17, 0x02	; 2
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b2 e0       	ldi	r27, 0x02	; 2
 3fa:	e0 ea       	ldi	r30, 0xA0	; 160
 3fc:	f6 e0       	ldi	r31, 0x06	; 6
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	0b bf       	out	0x3b, r16	; 59
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	07 90       	elpm	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	a2 30       	cpi	r26, 0x02	; 2
 40a:	b1 07       	cpc	r27, r17
 40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
 40e:	22 e0       	ldi	r18, 0x02	; 2
 410:	a2 e0       	ldi	r26, 0x02	; 2
 412:	b2 e0       	ldi	r27, 0x02	; 2
 414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
 416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
 418:	a2 30       	cpi	r26, 0x02	; 2
 41a:	b2 07       	cpc	r27, r18
 41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
 41e:	8d d0       	rcall	.+282    	; 0x53a <main>
 420:	3d c1       	rjmp	.+634    	; 0x69c <_exit>

00000422 <__bad_interrupt>:
 422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
 424:	08 9a       	sbi	0x01, 0	; 1
 426:	10 9a       	sbi	0x02, 0	; 2
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	83 ed       	ldi	r24, 0xD3	; 211
 42c:	90 e3       	ldi	r25, 0x30	; 48
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <I2C_Init+0xa>
 436:	00 c0       	rjmp	.+0      	; 0x438 <I2C_Init+0x14>
 438:	00 00       	nop
 43a:	82 e1       	ldi	r24, 0x12	; 18
 43c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 440:	e9 eb       	ldi	r30, 0xB9	; 185
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	8c 7f       	andi	r24, 0xFC	; 252
 448:	80 83       	st	Z, r24
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 450:	08 95       	ret

00000452 <I2C_Start>:
 452:	94 ea       	ldi	r25, 0xA4	; 164
 454:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 458:	ec eb       	ldi	r30, 0xBC	; 188
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	90 81       	ld	r25, Z
 45e:	99 23       	and	r25, r25
 460:	ec f7       	brge	.-6      	; 0x45c <I2C_Start+0xa>
 462:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 466:	98 7f       	andi	r25, 0xF8	; 248
 468:	98 30       	cpi	r25, 0x08	; 8
 46a:	99 f4       	brne	.+38     	; 0x492 <I2C_Start+0x40>
 46c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 470:	84 e8       	ldi	r24, 0x84	; 132
 472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 476:	ec eb       	ldi	r30, 0xBC	; 188
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	88 23       	and	r24, r24
 47e:	ec f7       	brge	.-6      	; 0x47a <I2C_Start+0x28>
 480:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 484:	88 7f       	andi	r24, 0xF8	; 248
 486:	88 31       	cpi	r24, 0x18	; 24
 488:	31 f0       	breq	.+12     	; 0x496 <I2C_Start+0x44>
 48a:	80 32       	cpi	r24, 0x20	; 32
 48c:	31 f0       	breq	.+12     	; 0x49a <I2C_Start+0x48>
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	08 95       	ret
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	08 95       	ret

0000049e <I2C_Write>:
 49e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 4a2:	84 e8       	ldi	r24, 0x84	; 132
 4a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4a8:	ec eb       	ldi	r30, 0xBC	; 188
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	88 23       	and	r24, r24
 4b0:	ec f7       	brge	.-6      	; 0x4ac <I2C_Write+0xe>
 4b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4b6:	88 7f       	andi	r24, 0xF8	; 248
 4b8:	88 32       	cpi	r24, 0x28	; 40
 4ba:	21 f0       	breq	.+8      	; 0x4c4 <I2C_Write+0x26>
 4bc:	80 33       	cpi	r24, 0x30	; 48
 4be:	21 f0       	breq	.+8      	; 0x4c8 <I2C_Write+0x2a>
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	08 95       	ret
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	08 95       	ret

000004cc <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 4cc:	84 e9       	ldi	r24, 0x94	; 148
 4ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 4d2:	ec eb       	ldi	r30, 0xBC	; 188
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	84 fd       	sbrc	r24, 4
 4da:	fd cf       	rjmp	.-6      	; 0x4d6 <I2C_Stop+0xa>
 4dc:	08 95       	ret

000004de <init>:
#include <stdio.h>


void init()
{
	I2C_Init();
 4de:	a2 df       	rcall	.-188    	; 0x424 <I2C_Init>
	InitializeDisplay();
 4e0:	4d d0       	rcall	.+154    	; 0x57c <InitializeDisplay>
	clear_display();
 4e2:	9e c0       	rjmp	.+316    	; 0x620 <clear_display>
 4e4:	08 95       	ret

000004e6 <uart1_Init>:
 4e6:	22 e0       	ldi	r18, 0x02	; 2
	//i2c_address = 0X78; // write address
}

void uart1_Init(unsigned int ubrr)
{
	UCSR1A =(1<<U2X1);							//full duplex
 4e8:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
	
	UCSR1B |=(1<<RXEN1)|(1<<TXEN1);				//enable receive and transmit
 4ec:	e9 ec       	ldi	r30, 0xC9	; 201
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	20 81       	ld	r18, Z
 4f2:	28 61       	ori	r18, 0x18	; 24
 4f4:	20 83       	st	Z, r18
	
	UCSR1C |=(1<<UCSZ10)|(1<<UCSZ11);			// 8 bit, no parity, 1 start bit, 1 stop bit
 4f6:	ea ec       	ldi	r30, 0xCA	; 202
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	20 81       	ld	r18, Z
 4fc:	26 60       	ori	r18, 0x06	; 6
 4fe:	20 83       	st	Z, r18
	
	UBRR1H = (unsigned char)(ubrr>>8);			//Baud rate values up to 16 bit
 500:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L = (unsigned char)ubrr;
 504:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 508:	08 95       	ret

0000050a <getchUSART1>:
}

char getchUSART1(void)							//Receives 1 byte and returns it
{
	while(!(UCSR1A & (1<<RXC1)));				//Waits until the character is received
 50a:	e8 ec       	ldi	r30, 0xC8	; 200
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	88 23       	and	r24, r24
 512:	ec f7       	brge	.-6      	; 0x50e <getchUSART1+0x4>
	return UDR1;
 514:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}
 518:	08 95       	ret

0000051a <putchUSART1>:

void putchUSART1(char tx)						//Transmit 1 byte
{
	while(!(UCSR1A & (1<<UDRE1)));				//Wait for empty transmit buffer
 51a:	e8 ec       	ldi	r30, 0xC8	; 200
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	90 81       	ld	r25, Z
 520:	95 ff       	sbrs	r25, 5
 522:	fd cf       	rjmp	.-6      	; 0x51e <putchUSART1+0x4>
	UDR1 = tx;
 524:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 528:	08 95       	ret

0000052a <OLED_display>:
}

void OLED_display()
{
	sendCharXY(UDR1,2,2);
 52a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 52e:	42 e0       	ldi	r20, 0x02	; 2
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	86 c0       	rjmp	.+268    	; 0x644 <sendCharXY>
 538:	08 95       	ret

0000053a <main>:
}

int main(void)
{
	init();
 53a:	d1 df       	rcall	.-94     	; 0x4de <init>
	uart1_Init(MYUBRRF);
 53c:	87 e6       	ldi	r24, 0x67	; 103
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	d2 df       	rcall	.-92     	; 0x4e6 <uart1_Init>
	while (1)
	{
		putchUSART1(getchUSART1()); //retransmit what is received
		_delay_ms(1000);
		OLED_display(UDR1);
 542:	ce ec       	ldi	r28, 0xCE	; 206
{
	init();
	uart1_Init(MYUBRRF);
	while (1)
	{
		putchUSART1(getchUSART1()); //retransmit what is received
 544:	d0 e0       	ldi	r29, 0x00	; 0
 546:	e1 df       	rcall	.-62     	; 0x50a <getchUSART1>
 548:	e8 df       	rcall	.-48     	; 0x51a <putchUSART1>
 54a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54c:	83 ed       	ldi	r24, 0xD3	; 211
 54e:	90 e3       	ldi	r25, 0x30	; 48
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <main+0x16>
 558:	00 c0       	rjmp	.+0      	; 0x55a <main+0x20>
 55a:	00 00       	nop
		_delay_ms(1000);
		OLED_display(UDR1);
 55c:	88 81       	ld	r24, Y
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	e4 df       	rcall	.-56     	; 0x52a <OLED_display>
 562:	f1 cf       	rjmp	.-30     	; 0x546 <main+0xc>

00000564 <ssd1306_command>:
 564:	cf 93       	push	r28
		Y+=3;
		X=4;
		setXY(X,Y);
		string++;
	}
}
 566:	c8 2f       	mov	r28, r24
 568:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 56c:	72 df       	rcall	.-284    	; 0x452 <I2C_Start>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	96 df       	rcall	.-212    	; 0x49e <I2C_Write>
 572:	8c 2f       	mov	r24, r28
 574:	94 df       	rcall	.-216    	; 0x49e <I2C_Write>
 576:	aa df       	rcall	.-172    	; 0x4cc <I2C_Stop>
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <InitializeDisplay>:
 57c:	8e ea       	ldi	r24, 0xAE	; 174
 57e:	f2 df       	rcall	.-28     	; 0x564 <ssd1306_command>
 580:	85 ed       	ldi	r24, 0xD5	; 213
 582:	f0 df       	rcall	.-32     	; 0x564 <ssd1306_command>
 584:	80 e8       	ldi	r24, 0x80	; 128
 586:	ee df       	rcall	.-36     	; 0x564 <ssd1306_command>
 588:	88 ea       	ldi	r24, 0xA8	; 168
 58a:	ec df       	rcall	.-40     	; 0x564 <ssd1306_command>
 58c:	8f e3       	ldi	r24, 0x3F	; 63
 58e:	ea df       	rcall	.-44     	; 0x564 <ssd1306_command>
 590:	83 ed       	ldi	r24, 0xD3	; 211
 592:	e8 df       	rcall	.-48     	; 0x564 <ssd1306_command>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	e6 df       	rcall	.-52     	; 0x564 <ssd1306_command>
 598:	80 e4       	ldi	r24, 0x40	; 64
 59a:	e4 df       	rcall	.-56     	; 0x564 <ssd1306_command>
 59c:	8d e8       	ldi	r24, 0x8D	; 141
 59e:	e2 df       	rcall	.-60     	; 0x564 <ssd1306_command>
 5a0:	84 e1       	ldi	r24, 0x14	; 20
 5a2:	e0 df       	rcall	.-64     	; 0x564 <ssd1306_command>
 5a4:	80 e2       	ldi	r24, 0x20	; 32
 5a6:	de df       	rcall	.-68     	; 0x564 <ssd1306_command>
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	dc df       	rcall	.-72     	; 0x564 <ssd1306_command>
 5ac:	81 ea       	ldi	r24, 0xA1	; 161
 5ae:	da df       	rcall	.-76     	; 0x564 <ssd1306_command>
 5b0:	88 ec       	ldi	r24, 0xC8	; 200
 5b2:	d8 df       	rcall	.-80     	; 0x564 <ssd1306_command>
 5b4:	8a ed       	ldi	r24, 0xDA	; 218
 5b6:	d6 df       	rcall	.-84     	; 0x564 <ssd1306_command>
 5b8:	82 e1       	ldi	r24, 0x12	; 18
 5ba:	d4 df       	rcall	.-88     	; 0x564 <ssd1306_command>
 5bc:	81 e8       	ldi	r24, 0x81	; 129
 5be:	d2 df       	rcall	.-92     	; 0x564 <ssd1306_command>
 5c0:	8f ec       	ldi	r24, 0xCF	; 207
 5c2:	d0 df       	rcall	.-96     	; 0x564 <ssd1306_command>
 5c4:	89 ed       	ldi	r24, 0xD9	; 217
 5c6:	ce df       	rcall	.-100    	; 0x564 <ssd1306_command>
 5c8:	81 ef       	ldi	r24, 0xF1	; 241
 5ca:	cc df       	rcall	.-104    	; 0x564 <ssd1306_command>
 5cc:	8b ed       	ldi	r24, 0xDB	; 219
 5ce:	ca df       	rcall	.-108    	; 0x564 <ssd1306_command>
 5d0:	80 e4       	ldi	r24, 0x40	; 64
 5d2:	c8 df       	rcall	.-112    	; 0x564 <ssd1306_command>
 5d4:	84 ea       	ldi	r24, 0xA4	; 164
 5d6:	c6 df       	rcall	.-116    	; 0x564 <ssd1306_command>
 5d8:	86 ea       	ldi	r24, 0xA6	; 166
 5da:	c4 df       	rcall	.-120    	; 0x564 <ssd1306_command>
 5dc:	8f ea       	ldi	r24, 0xAF	; 175
 5de:	c2 cf       	rjmp	.-124    	; 0x564 <ssd1306_command>
 5e0:	08 95       	ret

000005e2 <SendChar>:
 5e2:	cf 93       	push	r28
 5e4:	c8 2f       	mov	r28, r24
 5e6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 5ea:	33 df       	rcall	.-410    	; 0x452 <I2C_Start>
 5ec:	80 e4       	ldi	r24, 0x40	; 64
 5ee:	57 df       	rcall	.-338    	; 0x49e <I2C_Write>
 5f0:	8c 2f       	mov	r24, r28
 5f2:	55 df       	rcall	.-342    	; 0x49e <I2C_Write>
 5f4:	6b df       	rcall	.-298    	; 0x4cc <I2C_Stop>
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <setXY>:
 5fa:	cf 93       	push	r28
 5fc:	c6 2f       	mov	r28, r22
 5fe:	80 55       	subi	r24, 0x50	; 80
 600:	b1 df       	rcall	.-158    	; 0x564 <ssd1306_command>
 602:	8c 2f       	mov	r24, r28
 604:	88 0f       	add	r24, r24
 606:	88 0f       	add	r24, r24
 608:	88 0f       	add	r24, r24
 60a:	88 70       	andi	r24, 0x08	; 8
 60c:	ab df       	rcall	.-170    	; 0x564 <ssd1306_command>
 60e:	8c 2f       	mov	r24, r28
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	8f 70       	andi	r24, 0x0F	; 15
 618:	80 5f       	subi	r24, 0xF0	; 240
 61a:	a4 df       	rcall	.-184    	; 0x564 <ssd1306_command>
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <clear_display>:
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	d0 e0       	ldi	r29, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	8d 2f       	mov	r24, r29
 62a:	e7 df       	rcall	.-50     	; 0x5fa <setXY>
 62c:	c0 e0       	ldi	r28, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	d8 df       	rcall	.-80     	; 0x5e2 <SendChar>
 632:	cf 5f       	subi	r28, 0xFF	; 255
 634:	c0 38       	cpi	r28, 0x80	; 128
 636:	d9 f7       	brne	.-10     	; 0x62e <clear_display+0xe>
 638:	df 5f       	subi	r29, 0xFF	; 255
 63a:	d8 30       	cpi	r29, 0x08	; 8
 63c:	a1 f7       	brne	.-24     	; 0x626 <clear_display+0x6>
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <sendCharXY>:
//==========================================================//
/** Prints a display char (not just a byte) in coordinates X Y,
* being multiples of 8. This means we have 16 COLS (0-15)
* and 8 ROWS (0-7).*/
void sendCharXY(unsigned char data, int X, int Y)
{
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	08 2f       	mov	r16, r24
 64e:	86 2f       	mov	r24, r22
	setXY(X, Y);
 650:	64 2f       	mov	r22, r20
 652:	d3 df       	rcall	.-90     	; 0x5fa <setXY>
	I2C_Start(_i2c_address); // begin transmitting
 654:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 658:	fc de       	rcall	.-520    	; 0x452 <I2C_Start>
	I2C_Write(0x40);//data mode
 65a:	80 e4       	ldi	r24, 0x40	; 64
 65c:	20 df       	rcall	.-448    	; 0x49e <I2C_Write>
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	e8 01       	movw	r28, r16
 662:	cc 0f       	add	r28, r28
 664:	dd 1f       	adc	r29, r29
 666:	cc 0f       	add	r28, r28
 668:	dd 1f       	adc	r29, r29
 66a:	cc 0f       	add	r28, r28
 66c:	dd 1f       	adc	r29, r29
 66e:	cc 51       	subi	r28, 0x1C	; 28
 670:	d0 40       	sbci	r29, 0x00	; 0
 672:	00 0f       	add	r16, r16
 674:	11 1f       	adc	r17, r17
 676:	00 0f       	add	r16, r16
 678:	11 1f       	adc	r17, r17
 67a:	00 0f       	add	r16, r16
 67c:	11 1f       	adc	r17, r17
 67e:	04 51       	subi	r16, 0x14	; 20
 680:	10 40       	sbci	r17, 0x00	; 0

	for(int i=0;i<8;i++)
	I2C_Write(pgm_read_byte(myFont[data-0x20]+i));
 682:	fe 01       	movw	r30, r28
 684:	84 91       	lpm	r24, Z
 686:	0b df       	rcall	.-490    	; 0x49e <I2C_Write>
 688:	21 96       	adiw	r28, 0x01	; 1
{
	setXY(X, Y);
	I2C_Start(_i2c_address); // begin transmitting
	I2C_Write(0x40);//data mode

	for(int i=0;i<8;i++)
 68a:	c0 17       	cp	r28, r16
 68c:	d1 07       	cpc	r29, r17
 68e:	c9 f7       	brne	.-14     	; 0x682 <sendCharXY+0x3e>
	I2C_Write(pgm_read_byte(myFont[data-0x20]+i));

	I2C_Stop();    // stop transmitting
 690:	1d df       	rcall	.-454    	; 0x4cc <I2C_Stop>
 692:	df 91       	pop	r29
}
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	08 95       	ret

0000069c <_exit>:
 69c:	f8 94       	cli

0000069e <__stop_program>:
 69e:	ff cf       	rjmp	.-2      	; 0x69e <__stop_program>
